// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL") // uses connection pooling
}



model propertyData {
  id String @id @default(cuid()) @map("_id")
  name String
  propertyDescription String
  developerName String
  noOfUnit String
  location String
  tenure String
  latitude Float
  longitude Float
  developmentDescription String
  topDate String
  main_image String
  slug String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  unitMix unitMix[]
  nearbyAmenities nearbyAmenities[]
  facilities facilities[]
}

model unitMix {
  id                 String  @id @default(cuid()) @map("_id")
  propertyId String
  area String
  property propertyData @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model nearbyAmenities {
  id                 String  @id @default(cuid()) @map("_id")
  propertyId String
  type String
  description String
  property propertyData @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model facilities {
  id                 String  @id @default(cuid()) @map("_id")
  propertyId String
  location String
  description String
  property propertyData @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}
model Account {
  id                 String  @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String @id   @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
